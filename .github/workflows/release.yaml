# Summary of the steps:
# 1.Create new tag for common module
# 2.Update the dependency of common in "volumeGroupSnapshot", "replication", "migration" folder
# 3.Raise PR for this change.
# 4.Merge the PR.(Manually)
# 5.Create the new tags for "volumeGroupSnapshot", "replication", "migration", "podmon"
# 6.Create the GitHub release
# 7.All the steps are automated except the step 4.

name: Release Dell-CSI-Extensions

on:
  workflow_dispatch:
    inputs:
      volumeGroupSnapshot:
        description: 'Version for volumeGroupSnapshot module'
        required: false
        type: string
      replication:
        description: 'Version for replication module'
        required: false
        type: string
      migration:
        description: 'Version for migration module'
        required: false
        type: string
      common:
        description: 'Version for common module'
        required: false
        type: string
      podmon:
        description: 'Version for podmon module'
        required: false
        type: string
  
jobs:
  release-modules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all tags

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
            gpg_private_key: ${{ secrets.CSM_GPG_PRIVATE_KEY }}
            git_user_signingkey: true
            git_commit_gpgsign: true
            git_tag_gpgsign: true
            git_config_global: true

      - name: Set module input versions
        id: set_module_inputs
        run: |
          echo "VOLUME_GROUP_SNAPSHOT_VERSION=${{ inputs.volumeGroupSnapshot }}" >> $GITHUB_ENV
          echo "REPLICATION_VERSION=${{ inputs.replication }}" >> $GITHUB_ENV
          echo "MIGRATION_VERSION=${{ inputs.migration }}" >> $GITHUB_ENV
          echo "COMMON_VERSION=${{ inputs.common }}" >> $GITHUB_ENV
          echo "PODMON_VERSION=${{ inputs.podmon }}" >> $GITHUB_ENV

      - name: Create new tag for common module
        if: ${{ env.COMMON_VERSION }}
        id: create_common_tag
        run: |
          module="common"
          new_version="${{ env.COMMON_VERSION }}"
          new_tag="$module/$new_version"
          
          echo "Creating new tag for $module: $new_tag"
          echo "${module}_new_tag=$new_tag" >> $GITHUB_ENV
          echo "${module}_new_version=$new_version" >> $GITHUB_ENV
          
          git tag -s -a $new_tag -m "$module $new_tag"
          echo "Pushing the new tag $module/$new_version to the repository"
          git push origin $new_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update dependencies
        id: update_dependencies
        run: |
          declare -A modules=( 
            ["volumeGroupSnapshot"]="${{ env.VOLUME_GROUP_SNAPSHOT_VERSION }}",
            ["replication"]="${{ env.REPLICATION_VERSION }}",
            ["migration"]="${{ env.MIGRATION_VERSION }}"
          )

          common_version=""
          if [ -z "${{ env.COMMON_VERSION }}" ]; then
             common_branch=$(git branch --show-current)
             common_version=$(git tag --merged "$common_branch" -l "common/*" | sort -V | tail -n 1 | cut -d'/' -f2)
             echo "Using latest common version: $common_version from branch: $common_branch"
          else
            common_version="v${{ env.COMMON_VERSION }}"
            echo "Using provided common version: $common_version"
          fi

          changes_made=false
          for module in "${!modules[@]}"; do
            input_version="${modules[$module]}"
            echo "$module input_version=$input_version"
            if [ -n "$input_version" ]; then
              echo "Updating dependencies for module: $module"
              cd $module
              go get github.com/dell/dell-csi-extensions/common@$common_version
              go mod tidy
              cd ..
              if [[ -n $(git status --porcelain) ]]; then
                git add $module/go.mod $module/go.sum
                changes_made=true
              fi
            fi
          done

          if [ "$changes_made" = true ]; then
            git commit -m "Update common dependency to $common_version"
            echo "changes_made=true" >> $GITHUB_ENV
          else
            echo "changes_made=false" >> $GITHUB_ENV
          fi

      - uses: actions/create-github-app-token@v1.11.0
        id: generate-token
        with:
          app-id: ${{ vars.CSM_RELEASE_APP_ID }}
          private-key: ${{ secrets.CSM_RELEASE_APP_PRIVATE_KEY }}

      - name: Create pull request
        if: env.changes_made == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate-token.outputs.token }}
          branch: update-common-dependency
          commit-message: "Update common dependency to ${{ env.common_new_version }}"
          title: "Update common dependency to ${{ env.common_new_version }}"
          body: "This PR updates the common dependency to ${{ env.common_new_version }}."
          sign-commits: true
          delete-branch: true

      - name: Wait for PR to be merged
        if: env.changes_made == 'true'
        run: |
          echo "Waiting for the PR to be merged. Please merge the PR manually."
          while true; do
            pr_status=$(gh pr view update-common-dependency --json state --jq '.state')
            if [ "$pr_status" = "MERGED" ]; then
              echo "PR has been merged."
              break
            fi
            echo "PR not merged yet. Sleeping for 10 seconds..."
            sleep 10
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes from main
        if: env.changes_made == 'true'
        run: |
          git pull origin main

      - name: Create new tags for all modules
        if: env.changes_made == 'true'
        run: |
          declare -A modules=( 
            ["volumeGroupSnapshot"]="${VOLUME_GROUP_SNAPSHOT_VERSION}" 
            ["replication"]="${REPLICATION_VERSION}"
            ["migration"]="${MIGRATION_VERSION}"
            ["podmon"]="${PODMON_VERSION}"
          )
          for module in "${!modules[@]}"; do
            new_version="${modules[$module]}"
            if [ -n "$new_version" ]; then
              new_tag="$module/$new_version"

              echo "Creating new tag for $module: $new_tag"
              git tag -s -a $new_tag -m "$module $new_tag"
              git push origin $new_tag
            fi
          done

      - name: Create GitHub Release
        if: env.changes_made == 'true'
        run: |
          release_name=""
          tag_name="volumeGroupSnapshot/v${{ env.VOLUME_GROUP_SNAPSHOT_VERSION }}"
          
          if [ -n "${{ env.VOLUME_GROUP_SNAPSHOT_VERSION }}" ]; then
            release_name="${release_name}Release volumeGroupSnapshot v${{ env.VOLUME_GROUP_SNAPSHOT_VERSION }}, "
          fi
          if [ -n "${{ env.REPLICATION_VERSION }}" ]; then
            release_name="${release_name}Replication v${{ env.REPLICATION_VERSION }}, "
          fi
          if [ -n "${{ env.MIGRATION_VERSION }}" ]; then
            release_name="${release_name}Migration v${{ env.MIGRATION_VERSION }}, "
          fi
          if [ -n "${{ env.COMMON_VERSION }}" ]; then
            release_name="${release_name}Common v${{ env.COMMON_VERSION }}, "
          fi
          if [ -n "${{ env.PODMON_VERSION }}" ]; then
            release_name="${release_name}Podmon v${{ env.PODMON_VERSION }}, "
          fi
          
          release_name="${release_name%??}"  # Remove the trailing comma and space

          echo "Release notes: ${release_notes}"
          echo "Release name: ${release_name}"
          echo "Creating GitHub release with tag name: $tag_name"
          gh release create $tag_name --title "$release_name" --generate-notes --draft=true --prerelease=false --latest=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
