name: Release dell csi extensions optimized
# Invocable as a reusable workflow
# Can be manually triggered
on:
  workflow_call: 
  workflow_dispatch:
jobs:
  release-modules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all tags

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest release tags for all modules
        id: get_latest_release_tags
        run: |
          modules=("common" "volumeGroupSnapshot" "replication" "migration" "podmon")
          for module in "${modules[@]}"; do
            latest_release_tag=$(git tag -l "$module/*" | sort -V | tail -n 1)
            echo "Latest release tag for $module: $latest_release_tag"
            echo "${module}_release_tag=$latest_release_tag" >> $GITHUB_ENV
            version=${latest_release_tag#*/}
            echo "${module}_version=$version" >> $GITHUB_ENV
          done

      - name: Create new tag for common module
        id: create_common_tag
        run: |
          module="common"
          latest_release_tag=$(eval echo \${${module}_release_tag})
          IFS='/' read -r _ version <<< "$latest_release_tag"
          IFS='.' read -r major minor patch <<< "$version"
          new_minor=$((minor + 1))
          new_tag="$module/$major.$new_minor.0"
          new_version="$major.$new_minor.0"
          
          echo "Creating new tag for $module: $new_tag"
          echo "${module}_new_tag=$new_tag" >> $GITHUB_ENV
          echo "${module}_new_version=$new_version" >> $GITHUB_ENV
          
          git tag -a $new_tag -m "$module $new_tag"
          git push origin $new_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update dependencies and create PR for other modules
        id: update_dependencies_and_create_pr
        run: |
          modules=("volumeGroupSnapshot" "replication" "migration")
          common_version=$(eval echo \${common_new_version})
          branch_name="update-common-dependency"
          git checkout -b $branch_name
          for module in "${modules[@]}"; do
            echo "Updating dependencies for $module"
            cd $module
            go get github.com/dell/dell-csi-extensions/common@1.6.0
            go mod tidy
            cd ..
            git add $module/go.mod $module/go.sum
          done
          git commit -m "Update common dependency to v$common_version"
          git push origin $branch_name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create pull request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update-common-dependency
          title: "Update common dependency to v${{ env.common_new_version }}"
          body: "This PR updates the common dependency to v${{ env.common_new_version }}."

      - name: Wait for PR to be merged
        uses: actions/github-script@v6
        with:
          script: |
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            while (pr.data.state !== 'closed' || !pr.data.merged) {
              console.log('Waiting for PR to be merged...');
              await new Promise(resolve => setTimeout(resolve, 60000)); // Wait for 1 minute
              pr = await github.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });
            }
            console.log('PR merged!');

      - name: Create new tags for other modules
        id: create_tags
        run: |
          modules=("volumeGroupSnapshot" "replication" "migration" "podmon")
          for module in "${modules[@]}"; do
            latest_release_tag=$(eval echo \${${module}_release_tag})
            IFS='/' read -r _ version <<< "$latest_release_tag"
            IFS='.' read -r major minor patch <<< "$version"
            new_minor=$((minor + 1))
            new_tag="$module/$major.$new_minor.0"
            new_version="$major.$new_minor.0"
            
            echo "Creating new tag for $module: $new_tag"
            echo "${module}_new_tag=$new_tag" >> $GITHUB_ENV
            echo "${module}_new_version=$new_version" >> $GITHUB_ENV
            
            git tag -a $new_tag -m "$module $new_tag"
            git push origin $new_tag
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.volumeGroupSnapshot_new_tag }}  # Use the volumeGroupSnapshot tag
          release_name: |
            volumeGroupSnapshot ${{ env.volumeGroupSnapshot_new_version }},
            Replication ${{ env.replication_new_version }}, 
            Migration ${{ env.migration_new_version }},
            Common ${{ env.common_new_version }}, 
            Podmon ${{ env.podmon_new_version }}
          body: |
            ## Release Notes
            - **VolumeGroupSnapshot**: ${{ env.volumeGroupSnapshot_new_version }}
            - **Replication**: ${{ env.replication_new_version }}
            - **Migration**: ${{ env.migration_new_version }}
            - **Common**: ${{ env.common_new_version }}
            - **Podmon**: ${{ env.podmon_new_version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
